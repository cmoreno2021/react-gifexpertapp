{"version":3,"sources":["componets/AddCategory.js","componets/helpers/getGif.js","componets/GifGridItem.js","componets/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","props","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","setCategories","cats","type","value","onChange","target","handleInputChange","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAEC,GAAY,IAAD,EACAC,mBAAS,IADT,mBAC7BC,EAD6B,KACjBC,EADiB,KAYpC,OACI,qCACI,6BAAKD,IACL,8CAEA,sBAAME,SAXO,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,GAC9BR,EAAMS,eAAe,SAAAC,GAAI,OAAKR,GAAL,mBAAmBQ,OAC5CP,EAAc,KAOV,SACI,uBACAQ,KAAK,OACLC,MAAQV,EACRW,SAAY,SAACR,IAnBC,SAACA,GAEvBF,EAAgBE,EAAES,OAAOF,OAiBIG,CAAkBV,Y,+BCrBvCW,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACXC,EADW,0FAC8EC,UAAYH,GAD1F,sBAEOI,MAAQF,GAFf,cAEXG,EAFW,gBAGMA,EAAUC,OAHhB,uBAGTC,EAHS,EAGTA,KAEFC,EAAOD,EAAKE,KAAM,SAAAC,GACpB,MAAO,CACHC,GAAKD,EAAIC,GACTC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATxB,kBAaXM,GAbW,4CAAH,sDCAVO,EAAc,SAAEhC,GAEzB,OACI,sBAAKiC,UAAY,yCAAjB,UAEI,qBAAKC,IAAOlC,EAAMmB,IAAKgB,IAAMnC,EAAM6B,QACnC,4BAAI7B,EAAM6B,YCJTO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECCb,SAACA,GAAa,IAAD,EACXhB,mBAAS,CAC/BuB,KAAK,GACLa,SAAQ,IAHyB,mBAC9BC,EAD8B,KACvBC,EADuB,KAoBrC,OAdCC,qBAAY,WACXxB,EAASC,GACNwB,MAAO,SAAAC,GAGAH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAKtB,CAACpB,IAEIqB,EDnBgBK,CAAc1B,GAA/BO,EAF+B,EAE/BA,KAAKa,EAF0B,EAE1BA,QAYX,OACI,qCACA,6BAAKpB,IAEJ,sBAAKgB,UAAU,YAAf,UAEGI,GAAW,mBAAGJ,UAAU,mCAAb,qBAGHT,EAAKE,KAAI,SAACI,GAAD,OAEL,cAAC,EAAD,eAEIA,GADEA,EAAOF,cE1BxBgB,EAAe,WAAO,IAAD,EAGK3C,mBAAS,CAAC,cAHf,mBAGvB4C,EAHuB,KAGXpC,EAHW,KAW9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQoC,EAAWnB,KAAI,SAACT,GACZ,OAAO,cAAC,EAAD,CAEPA,SAAaA,GADNA,Y,MCnB/B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.2ce5ad6f.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ( props ) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e) =>{\r\n\r\n        setInputValue ( e.target.value);\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2)\r\n        props.setCategories( cats => [inputValue,...cats]);\r\n        setInputValue('');\r\n    }\r\n    return (\r\n        <>\r\n            <h1>{inputValue}</h1>\r\n            <h2>Add Category</h2>\r\n           \r\n            <form onSubmit= { handleSubmit }>\r\n                <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange= { (e) => { handleInputChange(e) }}\r\n                />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes= {\r\n    setCategories : PropTypes.func.isRequired\r\n}","//import React from 'react';\r\n\r\n   export const getGifs = async ( category ) => {\r\n         const url = `https://api.giphy.com/v1/gifs/search?api_key=13gwc7V2YEVAc9ym1Neu4k5iOWD6LLFD&q=${encodeURI ( category )}&limit=10`;\r\n         const respuesta = await fetch ( url );\r\n         const { data } = await respuesta.json();\r\n        \r\n         const gifs = data.map ( img => {\r\n             return {\r\n                 id : img.id,\r\n                 title: img.title,\r\n                 url: img.images.downsized_medium.url\r\n             }\r\n         })\r\n\r\n        return gifs;\r\n      \r\n\r\n     }","import React from 'react'\r\n\r\nexport const GifGridItem = ( props ) => {\r\n   \r\n    return (\r\n        <div className = \"card animate__animated animate__bounce\">\r\n            {/* { img.title } */}\r\n            <img src= { props.url} alt= {props.title} />\r\n            <p>{props.title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n//import { getGifs } from './helpers/getGif';\r\nexport const GifGrid = ( {category} ) => {\r\n \r\n   const {data,loading} =  useFetchGifs( category );\r\n   \r\n     //const [images, setImages] = useState([]);\r\n\r\n   /* useEffect ( ()=> {\r\n      getGifs( category )\r\n        .then ( imgs => setImages(imgs))\r\n        \r\n    },[category])*/\r\n   \r\n  \r\n    \r\n    return (\r\n        <>\r\n        <h3>{category}</h3>\r\n         \r\n         <div className=\"card-grid\">\r\n           \r\n           {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n          \r\n                {\r\n                    data.map((images) => \r\n                    \r\n                        <GifGridItem\r\n                        key= {images.id}\r\n                        {...images} />\r\n                        \r\n                    )\r\n                }\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState,useEffect} from 'react'\r\nimport { getGifs } from '../componets/helpers/getGif';\r\n\r\n\r\n\r\nexport const useFetchGifs = (category) =>{\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n \r\n     useEffect ( ()=> {\r\n      getGifs( category )\r\n        .then ( imgs => {\r\n            \r\n                \r\n                setstate({\r\n                    data:imgs,\r\n                    loading:false\r\n                });\r\n             \r\n        })\r\n        \r\n    },[category])\r\n\r\n    return state; // objeto data y loading\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './componets/AddCategory';\r\nimport { GifGrid } from './componets/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n   \r\n    const [categories, setCategories]= useState([\"One punch\"]);\r\n    //setCategories es una funcion calllback que mantiene el ultimo estado del primer atributo\r\n    /* const handleAdd = () =>{\r\n       setCategories( [...categories,'HunterxHunter']);\r\n    //    /*setCategories( cat=>[\r\n    //        ...cat,'HunterxHunter'\r\n    //    ]) //la funcion del ooks recibe un callback del estado anterior*/\r\n     //}\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories= {setCategories}/>\r\n            <hr/>\r\n             {/* <button onClick= { handleAdd }>Agregar</button> */}\r\n            <ol>\r\n                {\r\n                    categories.map((category) => {\r\n                        return <GifGrid\r\n                        key= { category }\r\n                        category = { category }\r\n                        />\r\n                    })\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}